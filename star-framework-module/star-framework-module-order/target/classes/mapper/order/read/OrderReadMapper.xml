<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.star.truffle.module.order.dao.read.OrderReadDao">
  <resultMap id="orderResponseDtoResultMap" type="com.star.truffle.module.order.dto.res.OrderResponseDto">
    <result column="order_id" property="orderId" />
    <result column="order_code" property="orderCode" />
    <result column="type" property="type" />
    <result column="member_id" property="memberId" />
    <result column="open_id" property="openId" />
    <result column="name" property="name" />
    <result column="mobile" property="mobile" />
    <result column="delivery_type" property="deliveryType" />
    <result column="province_name" property="provinceName" />
    <result column="city_name" property="cityName" />
    <result column="area_name" property="areaName" />
    <result column="delivery_address" property="deliveryAddress" />
    <result column="delivery_name" property="deliveryName" />
    <result column="delivery_mobile" property="deliveryMobile" />
    <result column="despatch_money" property="despatchMoney" />
    <result column="total_money" property="totalMoney" />
    <result column="total_brokerage" property="totalBrokerage" />
    <result column="region_id" property="regionId" />
    <result column="distributor_id" property="distributorId" />
    <result column="shop_address" property="shopAddress" />
    <result column="shop_name" property="shopName" />
    <result column="shop_mobile" property="shopMobile" />
    <result column="state" property="state" />
    <result column="deleted" property="deleted" />
    <result column="pickup_code" property="pickupCode" />
    <result column="create_time" property="createTime" />
    <result column="region_name" property="regionName" />
    <result column="distributor_name" property="distributorName" />
    <result column="delete_user" property="deleteUser" />
    <result column="remark" property="remark" />
  </resultMap>

  <sql id="sql_column">
    `order`.discounted_price, `order`.express_number, `order`.transport_state, `order`.remark, `order`.deleted, `order`.delete_user, order_id, order_code, 
    `order`.type, member_id, `order`.open_id, `order`.`name`, `order`.mobile, delivery_type, `order`.province_name, `order`.city_name, `order`.area_name, 
    delivery_address, delivery_name, delivery_mobile, despatch_money, total_money, (total_brokerage - back_brokerage) total_brokerage, 
    (total_brokerage_first - back_brokerage_first) total_brokerage_first, `order`.region_id, `order`.distributor_id, `order`.shop_address, `order`.shop_name, 
    `order`.shop_mobile, `order`.state, pickup_code, `order`.create_time, r.`name` region_name, p.areaId regionProvinceId, 
    ifnull(p.shortName, p.areaName) regionProvinceName, c.areaId regionCityId, ifnull(c.shortName, c.areaName) regionCityName, 
    a.areaId regionAreaId, ifnull(a.shortName, a.areaName) regionAreaName, t.areaId regionTownId, ifnull(t.shortName, t.areaName) regionTownName,	
    d.`name` distributor_name, `order`.back_brokerage, `order`.back_brokerage_first, `order`.profit_han, `order`.profit_wei
  </sql>

  <sql id="sql_where">
    <trim prefix="WHERE" prefixOverrides="AND | OR">
      <if test="orderId != null">
        and order_id = #{orderId}
      </if>
      <if test="orderCode != null">
        and order_code like "%"#{orderCode}
      </if>
      <if test="type != null">
        and `order`.type = #{type}
      </if>
      <if test="memberId != null">
        and member_id = #{memberId}
      </if>
      <if test="name != null and name != ''">
        and `order`.`name` = #{name}
      </if>
      <if test="mobile != null and mobile != ''">
        and `order`.mobile = #{mobile}
      </if>
      <if test="deliveryType != null">
        and delivery_type = #{deliveryType}
      </if>
      <if test="regionProvinceId != null">
        and p.areaId = #{regionProvinceId}
      </if>
      <if test="regionCityId != null">
        and c.areaId = #{regionCityId}
      </if>
      <if test="regionAreaId != null">
        and a.areaId = #{regionAreaId}
      </if>
      <if test="regionTownId != null">
        and t.areaId = #{regionTownId}
      </if>
      <if test="regionId != null">
        and `order`.region_id = #{regionId}
      </if>
      <if test="distributorId != null">
        and `order`.distributor_id = #{distributorId}
      </if>
      <if test="parentDistributorId != null">
        and `order`.distributor_id in (select distributor_id from distributor where parent_distributor_id = #{parentDistributorId})
      </if>
      <if test="shopName != null and shopName != ''">
        and `order`.shop_name like "%"#{shopName}"%"
      </if>
      <if test="expressNumber != null and expressNumber != ''">
        and `order`.express_number like "%"#{expressNumber}"%"
      </if>
      <if test="shopMobile != null and shopMobile != ''">
        and `order`.shop_mobile like "%"#{shopMobile}"%"
      </if>
      <if test="state != null">
        and `order`.state = #{state}
      </if>
      <if test="transportState != null">
        and `order`.transport_state = #{transportState}
      </if>
      <if test="deleted != null">
        and `order`.deleted = #{deleted}
      </if>
      <if test="states != null and states != ''">
        and `order`.state in (${states})
      </if>
      <if test="transportStates != null and transportStates != ''">
        and `order`.transport_state in (${transportStates})
      </if>
      <if test="pickupCode != null and pickupCode != ''">
        and pickup_code = #{pickupCode}
      </if>
      <if test="minutes30 != null">
        <if test="minutes30 == 0">
        and `order`.create_time &lt; date_sub(now(), interval 30 minute)
        </if>
        <if test="minutes30 == 1">
        and `order`.create_time &gt;= date_sub(now(), interval 30 minute)
        </if>
      </if>
      <if test="beginCreateTime != null">
        and `order`.create_time &gt;= #{beginCreateTime}
      </if>
      <if test="endCreateTime != null">
        and `order`.create_time &lt;= #{endCreateTime}
      </if>
      <if test="brokerage0 != null and brokerage0 == 0">
        <if test="distributorId != null">
        and `order`.total_brokerage &gt; 0
        </if>
        <if test="parentDistributorId != null">
        and `order`.total_brokerage_first &gt; 0
        </if>
      </if>
      <if test="productName != null and productName != ''">
        and exists (select 1 from order_detail d, product p where d.order_id = `order`.order_id and p.product_id = d.product_id and p.title like "%"#{productName}"%")
      </if>
      <if test="productId != null">
        and exists (select 1 from order_detail d, product p where d.order_id = `order`.order_id and p.product_id = d.product_id and p.product_id = #{productId})
      </if>
    </trim>
  </sql>

  <select id="getOrder" resultType="com.star.truffle.module.order.dto.res.OrderResponseDto">
  	set names utf8mb4;
    select
    <include refid="sql_column" />
    from `order`
		INNER JOIN distributor d on d.distributor_id = `order`.distributor_id
		INNER JOIN distribution_region r on `order`.region_id = r.region_id
		INNER JOIN sys_area p on p.areaId = r.province_id
		LEFT JOIN sys_area c on c.areaId = r.city_id
		LEFT JOIN sys_area a on a.areaId = r.area_id
		LEFT JOIN sys_area t on t.areaId = r.town_id
    where order_id = #{orderId}
  </select>

  <select id="queryOrder" resultMap="orderResponseDtoResultMap">
  	set names utf8mb4;
    select
    <include refid="sql_column" />
    from `order`
		INNER JOIN distributor d on d.distributor_id = `order`.distributor_id
		INNER JOIN distribution_region r on `order`.region_id = r.region_id
		INNER JOIN sys_area p on p.areaId = r.province_id
		LEFT JOIN sys_area c on c.areaId = r.city_id
		LEFT JOIN sys_area a on a.areaId = r.area_id
		LEFT JOIN sys_area t on t.areaId = r.town_id
    <include refid="sql_where" />
    order by
    <choose>
      <when test="pager != null and pager.orderBy != null and pager.orderBy != ''">${pager.orderBy}</when>
      <otherwise>`order`.state, `order`.create_time </otherwise>
    </choose>
    <choose>
      <when test="pager != null and pager.orderType != null and pager.orderType != ''">${pager.orderType} </when>
      <otherwise>desc </otherwise>
    </choose>
    <if test="pager != null and pager.pageSize!=null and pager.startIndex!=null">
      limit #{pager.startIndex}, #{pager.pageSize}
    </if>
  </select>

  <select id="sumBrokerage" resultType="java.lang.Long">
    select
      ifNull(sum(`order`.total_brokerage), 0)
    from `order`
		INNER JOIN distributor d on d.distributor_id = `order`.distributor_id
		INNER JOIN distribution_region r on `order`.region_id = r.region_id
		INNER JOIN sys_area p on p.areaId = r.province_id
		LEFT JOIN sys_area c on c.areaId = r.city_id
		LEFT JOIN sys_area a on a.areaId = r.area_id
		LEFT JOIN sys_area t on t.areaId = r.town_id
    <include refid="sql_where" />
  </select>

  <select id="sumBrokerageYun" resultType="java.lang.Long">
    select
      ifNull(sum(`order`.total_brokerage_first), 0)
    from `order`
		INNER JOIN distributor d on d.distributor_id = `order`.distributor_id
		INNER JOIN distribution_region r on `order`.region_id = r.region_id
		INNER JOIN sys_area p on p.areaId = r.province_id
		LEFT JOIN sys_area c on c.areaId = r.city_id
		LEFT JOIN sys_area a on a.areaId = r.area_id
		LEFT JOIN sys_area t on t.areaId = r.town_id
    <include refid="sql_where" />
  </select>

  <select id="queryOrderCount" resultType="java.lang.Long">
  	set names utf8mb4;
    select
    count(1)
    from `order`
		INNER JOIN distributor d on d.distributor_id = `order`.distributor_id
		INNER JOIN distribution_region r on `order`.region_id = r.region_id
		INNER JOIN sys_area p on p.areaId = r.province_id
		LEFT JOIN sys_area c on c.areaId = r.city_id
		LEFT JOIN sys_area a on a.areaId = r.area_id
		LEFT JOIN sys_area t on t.areaId = r.town_id
    <include refid="sql_where" />
  </select>

  <resultMap id="orderIndexMap" type="com.star.truffle.module.order.dto.res.OrderTotal">
    <result column="idx" property="idx" />
    <result column="distributor_id" property="distributorId" />
    <result column="totalOrderNum" property="totalOrderNum" />
    <result column="totalOrderMoney" property="totalOrderMoney" />
    <result column="totalOrderBrokerage" property="totalOrderBrokerage" />
    <result column="totalDespatchMoney" property="totalDespatchMoney" />
    <result column="fans_num" property="fansNum" />
    <result column="sold_num" property="soldNum" />
    <result column="shop_code" property="shopCode" />
    <result column="shop_name" property="shopName" />
    <result column="name" property="name" />
  </resultMap>

  <select id="orderIndexToday" resultMap="orderIndexMap">
  	set names utf8mb4;
    select * from (
      SELECT (@i:=@i+1) idx, t.distributor_id, t.totalOrderNum, t.totalOrderMoney, t.totalOrderBrokerage, t.totalDespatchMoney, t.fans_num, t.sold_num, t.shop_code, t.shop_name, t.address, t.`name` from (
      select 
        b.distributor_id, b.totalOrderNum, b.totalOrderMoney, b.totalOrderBrokerage, b.totalDespatchMoney, d.fans_num, d.sold_num, d.shop_code, d.shop_name, d.address, d.`name`
      from (
        select 
        o.distributor_id, count(1) totalOrderNum, IFNULL(SUM(o.total_money),0) totalOrderMoney, IFNULL(SUM(o.total_brokerage),0) totalOrderBrokerage, IFNULL(SUM(o.despatch_money),0) totalDespatchMoney
        from `order` o where o.state in (2, 3) and to_days(o.create_time) = to_days(now()) GROUP BY o.distributor_id
      ) b
      LEFT JOIN distributor d on d.distributor_id = b.distributor_id order by totalOrderNum desc limit 99999999
      ) t, (select @i:=0) t2
      order by totalOrderNum desc 
    ) z
    <if test="distributorId != null">
     where z.distributor_id = #{distributorId}
    </if>
    <if test="keyword != null and keyword != ''">
     where z.shop_name like "%"#{keyword}"%"
    </if>
    <if test="pageSize != null and startIndex != null">
    LIMIT #{startIndex}, #{pageSize}
    </if>
  </select>

  <resultMap id="totalMoneyMap" type="HashMap">
    <result column="totalMoney" property="totalMoney" />
    <result column="time" property="time" />
  </resultMap>
  
  <select id="totalMoney" resultMap="totalMoneyMap">
    select IFNULL(SUM(o.total_brokerage - o.back_brokerage), 0) totalMoney, IFNULL(DATE_FORMAT(max(o.create_time),'%Y-%m-%d %H:%i:%s'), '2018-10-10 00:00:00') time from `order` o where o.distributor_id = #{distributorId} and o.state in (2,3)
    <if test="beginTime != null">
      and o.create_time &gt; #{beginTime}
    </if>
  </select>
  
  <select id="totalMoneyYun" resultMap="totalMoneyMap">
    select IFNULL(SUM(o.total_brokerage_first - o.back_brokerage_first), 0) totalMoney, IFNULL(DATE_FORMAT(max(o.create_time),'%Y-%m-%d %H:%i:%s'), '2018-10-10 00:00:00') time from `order` o where 
    o.distributor_id in (select distributor_id from distributor where parent_distributor_id = #{parentDistributorId})
    and o.state in (2,3)
    <if test="beginTime != null">
      and o.create_time &gt; #{beginTime}
    </if>
  </select>

  <select id="totalOrderNumOfToday" resultType="java.lang.Long">
    select count(1) from `order` o where to_days(o.create_time) = to_days(now()) and o.state in (2,3)
  </select>
  
  <resultMap id="seeUserMap" type="HashMap">
    <result column="mobile" property="mobile" />
    <result column="name" property="name" />
    <result column="orderNum" property="orderNum" />
    <result column="totalMoney" property="totalMoney" />
    <result column="totalBrokergae" property="totalBrokergae" />
  </resultMap>

  <select id="seeUser" resultMap="seeUserMap">
  	set names utf8mb4;
    select 
      m.mobile, m.`name`, a.orderNum, a.totalMoney, a.totalBrokergae
    from
      (SELECT o.member_id, count(1) orderNum, SUM(o.total_money) totalMoney, SUM(o.total_brokerage - o.back_brokerage) totalBrokergae 
        FROM `order` o where o.distributor_id = #{distributorId} GROUP BY o.member_id
      ) a
       , member_info m where m.member_id = a.member_id
    <if test="keyword != null and keyword != ''">
     and (m.mobile = #{keyword} or m.`name` = #{keyword})
    </if>
    order by a.totalMoney desc
    <if test="pager != null and pager.pageSize!=null and pager.startIndex!=null">
      limit #{pager.startIndex}, #{pager.pageSize}
    </if>
  </select>
  
  <resultMap id="orderNumMap" type="HashMap">
    <result column="state" property="state" />
    <result column="num" property="num" />
  </resultMap>

  <select id="orderNum" resultMap="orderNumMap">
    SELECT o.state, count(1) num FROM `order` o where o.deleted = 0 and o.member_id = #{memberId} GROUP BY o.state HAVING count(1) > 0
  </select>
  
  <resultMap id="distributorMap" type="HashMap">
    <result column="distributor_id" property="distributorId" />
    <result column="shop_code" property="shopCode" />
    <result column="shop_name" property="shopName" />
  </resultMap>
  
  <select id="getDistributorIds" resultMap="distributorMap">
  	set names utf8mb4;
    select DISTINCT o.distributor_id, d.shop_code, d.shop_name FROM `order` o
    inner join distributor d on d.distributor_id = o.distributor_id
    <trim prefix="WHERE" prefixOverrides="AND | OR">
    	<if test="states != null and states != ''">
	      and o.state in (${states})
	    </if>
			<if test="transportStates != null and transportStates != ''">
	      and o.transport_state in (${transportStates})
	    </if>
	    <if test="beginCreateTime != null">
	      and o.create_time &gt;= #{beginCreateTime}
	    </if>
	    <if test="endCreateTime != null">
	      and o.create_time &lt;= #{endCreateTime}
	    </if>
    </trim>
  </select>
  
  <resultMap id="distributorTotalMap" type="com.star.truffle.module.order.dto.res.DistributorTotalResponseDto">
  </resultMap>
  
  <select id="totalOrderByDistributor" resultMap="distributorTotalMap">
  	select 
      r.distributor_id, r.create_date create_time, count(DISTINCT r.order_id) order_num, 
		  IFNULL(sum(d.count),0) product_num, count(DISTINCT r.member_id) pay_people_num, 
		  IFNULL(sum(IF(r.type=1,1,0)),0) buy_self_num, IFNULL(sum(IF(r.delivery_type=2,1,0)),0) use_despatch_num,
		  IFNULL(sum(IF(r.type=2,1,0)),0) unbuy_self_num, IFNULL(sum(IF(r.delivery_type=1,1,0)),0) unuse_despatch_num,
		  IFNULL(sum(r.total_money),01) pay_money_of_product, IFNULL(sum(r.despatch_money),0) pay_money_of_despatch,
		  IFNULL(sum(r.total_brokerage),0) kickback_second, IFNULL(sum(r.total_brokerage_first),0) kickback_first
    from (
      SELECT 
        o.order_id, o.type, o.member_id, o.delivery_type, o.distributor_id, o.total_money, o.despatch_money, o.total_brokerage-o.back_brokerage total_brokerage, o.total_brokerage_first-o.back_brokerage_first total_brokerage_first, o.create_time, DATE_FORMAT(o.create_time, '%Y-%m-%d') create_date
      from `order` o where o.state in (2, 3) and TO_DAYS( NOW() ) - TO_DAYS(o.create_time) = #{day}
      <if test="distributorId != null">
        and o.distributor_id = #{distributorId}
      </if>
    ) r
    INNER JOIN (
      SELECT SUM(e.count) count, e.order_id from order_detail e GROUP BY e.order_id
    ) d on r.order_id = d.order_id
    GROUP BY r.distributor_id
    order by 3 desc
  </select>
  
  <select id="totalOrderBy" resultMap="distributorTotalMap">
  	select 
      r.create_date create_time, count(DISTINCT r.order_id) order_num, 
		  IFNULL(sum(d.count),0) product_num, count(DISTINCT r.member_id) pay_people_num, 
		  IFNULL(sum(IF(r.type=1,1,0)),0) buy_self_num, IFNULL(sum(IF(r.delivery_type=2,1,0)),0) use_despatch_num,
		  IFNULL(sum(IF(r.type=2,1,0)),0) unbuy_self_num, IFNULL(sum(IF(r.delivery_type=1,1,0)),0) unuse_despatch_num,
		  IFNULL(sum(r.total_money),01) pay_money_of_product, IFNULL(sum(r.despatch_money),0) pay_money_of_despatch,
		  IFNULL(sum(r.total_brokerage),0) kickback_second, IFNULL(sum(r.total_brokerage_first),0) kickback_first
    from (
      SELECT 
        o.order_id, o.type, o.member_id, o.delivery_type, o.distributor_id, o.total_money, o.despatch_money, o.total_brokerage-o.back_brokerage total_brokerage, o.total_brokerage_first-o.back_brokerage_first total_brokerage_first, o.create_time, DATE_FORMAT(o.create_time, '%Y-%m-%d') create_date
      from `order` o where o.state in (2, 3) and TO_DAYS( NOW() ) - TO_DAYS(o.create_time) = #{day}
    ) r
    INNER JOIN (
      SELECT SUM(e.count) count, e.order_id from order_detail e GROUP BY e.order_id
    ) d on r.order_id = d.order_id
  </select>
</mapper>